<#
By default, the script takes no action on the endpoint, and only reports back if a desired app is found and not managed
by chocolatey.

The script likely wont work as expected if is machine is pending a reboot or is not at least choco -v 2.3.0+. 

$alert_if_unmanaged_packages_found = "False" 
$force_add_unmanaged_packages = "False"
$ignore_version_and_reboot_checks = "False"
$update_all_packages = "False"

The script variables defaults are all False which will take the minimal action of logging the results to the asset's activity log.

$alert_if_unmanaged_packages_found = "False" 
    - By Default having the variable set to False will only log findings to the Asset Activtiy Log
    - Setting this variable to "True" creates a Syncro RMM Alert if software installed on the machine is the script's list 
        of apps to manage.
    - The RMM Alert description will have a list of the packages found

$force_add_unmanaged_packages = "False"
    - Setting this variable to "True"  adds the package to the choco management list using the command choco install "packagename" -y;
    - example: choco install googlechrome -y
    - As far as I can tell this will also trigger an update attempt, for most packages

$ignore_version_and_reboot_checks = "False"
    - By default the script will error out and print to the activity log if you have older verions of choco or a pending reboot
    - Setting this variable to "True" will force run the script even with known compatibility issues. 
    - Additional logic is needed for the script to work as expected when a reboot is pending and for older choco versions. (which I have not yet figured out)
    - Sometimes these work, other times it doesnt. Both do not reporting back into Syncro cleanly 

$update_all_packages = "False"
    - Setting this variable to "True" will trigger updates for all packages found in the choco list.
    - EVEN if a choco package is NOT in THIS SCRIPTS list. So be careful with this one.
    - Allows use of this one script for weekly / monthly updates of all choco packages.


################# IMPORTANT SCRIPT INFORMATION ################# 

By default the dropdown variables set the script to log most of the findings to the the asset's activity log. More details will
be in the script output and in the RMM Alert Description. Toggle the corresponding variable to have the script create a
RMM Alert, force add the found packages to the choco update list, to ignore warnings and/or force all choco packages to update
now. I added as much information into the different outputs as I could, (RMM Alert, Write-Host Outputs, and Asset Activity Log)
and it should be clear what was found.

This script works separately from a Syncro 3rd Party Patch Policy. Neither parts interact or would cause a conflict, so it safe to use
both. BUT you need to run your own schedule for the updating all choco packages. Syncro only updates the specific packages you select 
in the 3rd Party Patch Policy builder.

Command Prompt command to update all Choco Packages is:

choco upgrade all -y

Run this cmd via a syncro scheduled script, windows scheduled task, or some other method, to have the packages found
(and added to choco's management list by this script) run an update check. When adding a new package to the list of chocolatey
managed on the machine, and chocolatey does attempt to update packages when they are initially added, BUT behavior could vary
by package.

Command Prompt command to see your current choco managed package list:

choco list

################# CUSTOMIZE THE UPDATE IF PRESENT LIST ################# 

Update the $packages hashtable in the powershell code below to add or remove the software's installed display name and the
corresponding package in chocolatey.

Like all things in the IT world, there is no guarantee all the already added packages listed below are the current, correct
and actually the exact package you would want. Other situtions will likely arise, like if a Package name gets changed or updated
in the future. This list needs to be reviewed both INTIALLY and on a reasonable regular cadence. The list was limited to the 
largest, most commonly know packages and software as of the beginning of 2025.

I likely forgot some but feel free to research and add/adjust/remove packages as appropriate.

##############################################################################
################# Additional Considerations about Chocolatey ################# 
#################    And How Update If Present Only Works    ################# 
##############################################################################

For many common installers (e.g., Zoom, Chrome) Chocolatey sometimes can detect an existing installation and upgrade using the
existing instance, without uninstalling and reinstalled but this isn't universal. Some Chocolatey packages might work
differently, behavior can vary by software vendor. It's best practice to check the choco package's documentation or test on a
non-critical system if you're concerned of impacting Endusers.

https://community.chocolatey.org/packages

Any software that has a matching Chocolatey package can be added to the choco update list (type in command prompt: "choco list" to
see your machines current list) but the tricky part is matching up the reported Display Name of installed software with the official
choco package name. If you are not careful you can easily make mistakes here.

Its a simple command to add a new package to the choco managed list.

Example:

choco install googlechrome -y

To force update ALL Packages in the choco list:

choco upgrade all -y

#>

Import-Module $env:SyncroModule

# Check if Chocolatey is installed
if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
    Write-Error "Chocolatey is not installed on this machine. Exiting..."
    Rmm-Alert -Category 'Chocolatey missing' -Body "Chocolatey install is missing. Update only if Present script was ran but the choco command was not found. Please make sure Chocolatey is installed and try again."
    
    Log-Activity -Message "FAILED - Choco not installed on script Choco Update Only If Present " -EventName "Choco Update"
    exit 1
}

# Define the list of common packages
$packages = @(
    @{ PackageName = "googlechrome";         DisplayName = "Google Chrome" },
    @{ PackageName = "firefox";              DisplayName = "Mozilla Firefox" },
    @{ PackageName = "7zip";                 DisplayName = "7-Zip" },
    @{ PackageName = "vlc";                  DisplayName = "VLC Media Player" },
    @{ PackageName = "notepadplusplus";      DisplayName = "Notepad++" },
    @{ PackageName = "git";                  DisplayName = "Git" },
    @{ PackageName = "adobereader";          DisplayName = "Adobe Reader" },
    @{ PackageName = "vscode";               DisplayName = "Visual Studio Code" },
    @{ PackageName = "opera";                DisplayName = "Opera" },
    @{ PackageName = "dropbox";              DisplayName = "Dropbox" },
    @{ PackageName = "teamviewer";           DisplayName = "TeamViewer" },
    @{ PackageName = "slack";                DisplayName = "Slack" },
    @{ PackageName = "postman";              DisplayName = "Postman" },
    @{ PackageName = "nodejs";               DisplayName = "Node.js" },
    @{ PackageName = "python3";              DisplayName = "Python 3" },
    @{ PackageName = "docker-desktop";       DisplayName = "Docker Desktop" },
    @{ PackageName = "putty";                DisplayName = "PuTTY" },
    @{ PackageName = "irfanview";            DisplayName = "IrfanView" },
    @{ PackageName = "gimp";                 DisplayName = "GIMP" },
    @{ PackageName = "libreoffice-fresh";    DisplayName = "LibreOffice" },
    @{ PackageName = "steam";                DisplayName = "Steam" },
    @{ PackageName = "epicgameslauncher";    DisplayName = "Epic Games Launcher" },
    @{ PackageName = "microsoft-teams";      DisplayName = "Microsoft Teams" },
    @{ PackageName = "zoom";                 DisplayName = "Zoom" },
    @{ PackageName = "microsoft-edge";       DisplayName = "Microsoft Edge" },
    @{ PackageName = "powerbi";              DisplayName = "Power BI Desktop" },
    @{ PackageName = "obs-studio";           DisplayName = "OBS Studio" },
    @{ PackageName = "handbrake";            DisplayName = "HandBrake" },
    @{ PackageName = "filezilla";            DisplayName = "FileZilla" },
    @{ PackageName = "winrar";               DisplayName = "WinRAR" },
    @{ PackageName = "openvpn";              DisplayName = "OpenVPN" },
    @{ PackageName = "evernote";             DisplayName = "Evernote" },
    @{ PackageName = "ccleaner";             DisplayName = "CCleaner" },
    @{ PackageName = "greenshot";            DisplayName = "Greenshot" }
)

# Function to get installed software from the registry
function Get-InstalledSoftware {
    $registryPaths = @(
        "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*",
        "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*"
    )
    foreach ($path in $registryPaths) {
        Get-ItemProperty $path -ErrorAction SilentlyContinue | Where-Object { $_.DisplayName }
    }
}

$installedSoftware = Get-InstalledSoftware #installed list of software on the machine

# Get the list of choco packages on this endpoint and store in variable $chocoRawOutput
try {
    # Get the raw output from choco list including any warnings
    $chocoRawOutput = choco list --no-color 2>&1
    Write-Output $chocoRawOutput
    Write-Output "------------------------------------------------"
} catch {
    Write-Error "Error retrieving Chocolatey packages: $_"
    exit 1
}

# Check if the raw output contains a pending reboot warning and display a warning message
Write-Host "Ignore Version and Reboot check is set to $ignore_version_and_reboot_checks"
if($ignore_version_and_reboot_checks -eq "False"){    
    if ($chocoRawOutput -match "reboot") {
        Write-Output "Warning: A pending system reboot has been detected. Script will not likely work. Exiting"
        Rmm-Alert -Category 'Reboot Required' -Body "The chocolatey package update script is unable to run due to a pending reboot. Please reboot this computer and try again"
        Log-Activity -Message "Reboot Required per Chocolatey. Script is unlikely to work. Exiting Script" -EventName "Choco Update"
        exit 1
    }
    else{
        Write-Host "No pending system reboot detected."
    }
}
else{    
    if ($chocoRawOutput -match "reboot") {
        Write-Output "Warning: A pending system reboot has been detected."        
        Log-Activity -Message "Ignoring Reboot Warning on Chocolatey Update If Present Customized Script. Unknown if Script will work" -EventName "Choco Update"
    }
}

$version = [version](choco -v)
Write-Output "Chocolately version is $version"
if($ignore_version_and_reboot_checks -eq "False"){ 
    if ($version -ge [version]"2.3") {
        Write-Output "Chocolately version is 2.3 or higher. Continuing with the script"
    } else {
        Write-Output "Chocolately version: $version is lower than 2.3, unlikely to work exiting"
        Log-Activity -Message "Chocolately version: $version is lower than 2.3. Exiting Script" -EventName "Choco Update"
        exit 1
    }
}
else{
    if ($version -ge [version]"2.3") {
        Write-Output "Chocolately version is 2.3 or higher"
    } else{ 
    Write-Output "Chocolately version is lower than 2.3, but ignore was set to true, continuing. Unknown if older choco version will work"
    Log-Activity -Message "Ignoring Chocolately version lower than 2.3 for Update if Present Customizable List. Unknown how well this script will work" -EventName "Choco Update"
    }
}

Write-Output "------------------------------------------------"
# Filter out validation warnings and pending reboot messages for further processing
# $chocoRawOutput is the list of packages from the choco list command
$chocoOutput = $chocoRawOutput | Where-Object { $_ -notmatch "Validation Warnings:" -and $_ -notmatch "pending system reboot" }

# Parse the choco list output into a hashtable for easier comparison
$chocoManaged = @{}
foreach ($line in $chocoOutput) {
    if ([string]::IsNullOrWhiteSpace($line)) { continue }
    if ($line -match "^\s*(\S+)\s+(\S+)") {
        $pkgName = $matches[1].ToLower()
        $pkgVersion = $matches[2]
        $chocoManaged[$pkgName] = $pkgVersion
    }
}

# Compare This Script's list against Chocolatey managed packages and installed software
$managedList = @()             # Packages from our list that are managed by Chocolatey
$unmanagedSoftwareList = @()   # Packages from our list that are installed but NOT managed by Chocolatey

# $packages is the variable that holds the hashtable of all the apps that are wanted to only update if present
# The script will loop through the predefined list of package names and compare them to the chocoManaged list (variable that holds choco list output)
# If the package is found in the chocoManaged list (meaning Choco installed and is managing the app on this endpoint), it will add it to the managedList variable
foreach ($pkg in $packages) {
    $pkgNameLower = $pkg.PackageName.ToLower()
    if ($chocoManaged.ContainsKey($pkgNameLower)) {
        $managedList += $pkg
    }
    else {
        # Else if there was not a match found in the choco list output, check to see if a desired app is installed on the machine. 
        # If an app on the endpoint Display Name matches the name of a package in our list, add it to the unmanagedSoftwareList variable
        $foundSoftware = $installedSoftware | Where-Object { $_.DisplayName -match [regex]::Escape($pkg.DisplayName) }
        if ($foundSoftware) { 
            $unmanagedSoftwareList += $pkg 
        }
    }
}

# Output to console the list of found Chocolatey managed packages on this Endpoint
# This list could included software added manually or another way to the choco list
Write-Output " "
Write-Output "=== All Chocolatey Managed Packages (Total: $($chocoManaged.Keys.Count)) ==="
Write-Output "------------------------------------------------"

foreach ($pkgName in $chocoManaged.Keys) {
    Write-Host "- $pkgName (Version: $($chocoManaged[$pkgName]))"    
}

# This will output to console, the already added choco managed packages that match this Script's predefined list
Write-Output " "
Write-Output "Chocolatey Managed Packages (from our list) (Count: $($managedList.Count)) ==="
Write-Output "------------------------------------------------"
foreach ($pkg in $managedList) {
    Write-Output "- $($pkg.DisplayName) (Package: $($pkg.PackageName))"
}

# This will output to console, the installed software that is not managed by Chocolatey but could be added
Write-Output " "
Write-Output "`n=== Installed Software (Not Managed by Chocolatey) that could be added (Count: $($unmanagedSoftwareList.Count))"
Write-Output "------------------------------------------------"
foreach ($pkg in $unmanagedSoftwareList) {
    Write-Output "- $($pkg.DisplayName) (Package: $($pkg.PackageName))"
}

# Log the findings to Syncro Activity Asset Log
$total_count_of_packages_managed_by_Chocolatey = $chocoManaged.Keys.Count
$total_count_of_already_added_packages = $managedList.Count
$total_count_of_unmanaged_packages = $unmanagedSoftwareList.Count

Write-Output " "
Log-Activity -Message "$total_count_of_unmanaged_packages apps available for Choco Update if Present || $total_count_of_already_added_packages apps currently managed || $total_count_of_packages_managed_by_Chocolatey total apps managed by Choco " -EventName "Choco Update"

# Build variables to hold details about the findings for the RMM Alert
$unmanagedListOutput = $unmanagedSoftwareList | ForEach-Object { "- $($_.DisplayName) (Package: $($_.PackageName))" }
$allChocoPackages = $chocoManaged.Keys | ForEach-Object { "- $_ (Version: $($chocoManaged[$_]))" } # List all Chocolatey managed packages (complete list)
$managedListOutput = $managedList | ForEach-Object { "- $($_.DisplayName) (Package: $($_.PackageName))" } # List the packages from our list that are already managed by Chocolatey
$unmanagedListOutput = $unmanagedSoftwareList | ForEach-Object { "- $($_.DisplayName) (Package: $($_.PackageName))" } # List the installed (but unmanaged) software from our list that could be added
$totalMatching = $managedList.Count + $unmanagedSoftwareList.Count # Calculate the total matching packages from our list (both managed and unmanaged)

# Build the alert body including all sections and package names
$body = @"
$($chocoManaged.Keys.Count) managed packages are currently reported by chocolatey on this local computer. This list could include manually added Packages outside of Syncros Third Party Patch policy: $allChocoPackages

$($managedList.Count) actively managed packages that match with the Script's Package List: $managedListOutput

$($unmanagedSoftwareList.Count) not actively managed packages by Chocolatey that Could be Added: $unmanagedListOutput
"@

if ($($unmanagedSoftwareList.Count) -gt 1 -and $alert_if_unmanaged_packages_found -eq "True") {
    Rmm-Alert -Category 'Unmanaged Choco Package' -Body $body
} else {
    Write-Output "Option for Alert set to FALSE.Unmanaged package count is: $unmanagedListOutput"
}

if ($force_add_unmanaged_packages -eq "True") {
    Log-Activity -Message "Force Adding Packages to Choco List Count: $($unmanagedSoftwareList.Count) " -EventName "Choco Update"
    foreach ($pkg in $unmanagedSoftwareList) {
        Write-Output "Installing unmanaged package: $($pkg.DisplayName) (Package: $($pkg.PackageName))..."
        choco install $($pkg.PackageName) -y        
    }
}

if ($update_all_packages -eq "True") {
    Log-Activity -Message "Updating all Chocolatey Packages on this endpoint" -EventName "Choco Update"
    Write-Output "Updating all Chocolatey Packages on this endpoint..."

    try {
        $error.Clear()
        $chocoResult = choco upgrade all -y 2>&1

        if ($LASTEXITCODE -ne 0) {
            throw "Chocolatey upgrade failed with exit code $LASTEXITCODE"
        }

        Log-Activity -Message "Chocolatey packages updated successfully" -EventName "Choco Update Success"
        Write-Output "Chocolatey packages updated successfully."
    }
    catch {
        $errorMessage = $_.Exception.Message
        Log-Activity -Message "Chocolatey upgrade failed: $errorMessage" -EventName "Choco Update Failure"
        Write-Output "Error: Chocolatey upgrade failed. See logs for details."

        # Optionally retry the upgrade
        Start-Sleep -Seconds 60
        Write-Host "Retrying Chocolatey Packages upgrade... after 60 seconds"
        $retryResult = choco upgrade all -y 2>&1

        if ($LASTEXITCODE -ne 0) {
            Log-Activity -Message "Chocolatey retry failed with exit code $LASTEXITCODE" -EventName "Choco Update Retry Failure"
            Write-Host "Retry failed. Manual intervention required."
        } else {
            Log-Activity -Message "Chocolatey retry succeeded" -EventName "Choco Update Retry Success"
            Write-Host "Chocolatey retry successful."
        }
    }
}